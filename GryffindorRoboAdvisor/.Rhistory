for (n in 1:(flor + 1)){
dataopt<- minvarpf(get(paste("data", n, sep = "")))
assign(as.character(paste("dataopt", as.character(n),
sep = "")), dataopt)
if (is.function(updateProgress)) {
text <- "Please don't turn off your Computer"
updateProgress(detail = text)
}
finaldata <- cbind(finaldata, dataopt)
}
return(finaldata)
} else {
finaldata <- subdata
return(finaldata)
}
### End of Dataspliting function #################################
}
### call the portfolios according to the user's input ##########################
################################################################################
output$ourPF <- renderPlot({
# Create the Progress object
progress <- shiny::Progress$new()
progress$set(message = "Calculating Optimal Portfolio", value = 0)
# Close the progress when this reactive exits (even if there's an error)
on.exit(progress$close())
updateProgress <- function(value = NULL, detail = NULL) {
if (is.null(value)) {
value <- progress$getValue()
value <- value + (progress$getMax() - value) / 3
}
progress$set(value = value, detail = detail)
}
##### short bond only ##########################################################
if (input$rpref2 == 1 && input$inv_horizon <= 5) {
portfoliofinal <<- indexpf(as.data.frame(shortbond))
equityinvestment <<- 0
portfolioplot <- cbind(ovr$Date, portfoliofinal)
names(portfolioplot) <- c("Date", "Portfolio")
portfolioplot$Date <- strptime(as.character(portfolioplot$Date),
"%d/%m/%Y")
portfolioplot$Date <- as.Date(format(portfolioplot$Date, "%Y-%m-%d"))
portfolioplot <- cbind(portfolioplot, benchmark)
plotfinal <- ggplot() +
geom_line(data = portfolioplot, aes(
Date, Portfolio, group = 1, colour = "Your Portfolio"), size = 1) +
geom_line(data = portfolioplot, aes(
Date, benchmark, group = 1,
colour = "MSCI World Benchmark"), size = 1) +
labs(x = "Year", y = "Portfolio Developement",
title = "Short Bond Portfolio") +
scale_x_date(date_breaks = "2 years") +
scale_colour_manual("", values = c("Your Portfolio" = "blue",
"MSCI World Benchmark" = "grey")) +
theme(legend.position=c(.9, .1))
theme_minimal()
}
##### long bond only ###########################################################
if ((input$rpref2 == 2 && input$inv_horizon <= 5) ||
(input$rpref2 == 1 && input$inv_horizon > 5 &&
input$inv_horizon <= 10)) {
portfoliofinal <<- indexpf(as.data.frame(longbond))
equityinvestment <<- 0
portfolioplot <- cbind(ovr$Date, portfoliofinal)
names(portfolioplot) <- c("Date", "Portfolio")
portfolioplot$Date <- strptime(as.character(portfolioplot$Date),
"%d/%m/%Y")
portfolioplot$Date <- as.Date(format(portfolioplot$Date, "%Y-%m-%d"))
portfolioplot <- cbind(portfolioplot, benchmark)
plotfinal <- ggplot() +
geom_line(data = portfolioplot, aes(
Date, Portfolio, group = 1, colour = "Your Portfolio"), size = 1) +
geom_line(data = portfolioplot, aes(
Date, benchmark, group = 1,
colour = "MSCI World Benchmark"), size = 1) +
labs(x = "Year", y = "Portfolio Developement",
title = "Long Bond Portfolio") +
scale_x_date(date_breaks = "2 years") +
scale_colour_manual("", values = c("Your Portfolio" = "blue",
"MSCI World Benchmark" = "grey")) +
theme(legend.position=c(.9, .1))
theme_minimal()
}
##### minimum variance PF ######################################################
if ((input$rpref2 == 3 && input$inv_horizon <= 5) ||
#redundant but included so that the number of conitions = number of PFs
(input$rpref2 == 3 && input$inv_horizon > 5 &&
input$inv_horizon <= 10) ||
(input$rpref2 == 2 && input$inv_horizon > 5)) {
####### split the required input df into sub-df's to make them optimizable #####
finaldata <- datasplit(newData(), updateProgress)
portfoliofinal <<- minvarpf(finaldata)
equityinvestment <<- 1
####### include the performance plot in Shiny ##################################
portfolioplot <- cbind(ovr$Date, portfoliofinal)
names(portfolioplot) <- c("Date", "Portfolio")
portfolioplot$Date <- strptime(as.character(portfolioplot$Date),
"%d/%m/%Y")
portfolioplot$Date <- as.Date(format(portfolioplot$Date, "%Y-%m-%d"))
portfolioplot <- cbind(portfolioplot, benchmark)
plotfinal <- ggplot() +
geom_line(data = portfolioplot, aes(
Date, Portfolio, group = 1, colour = "Your Portfolio"), size = 1) +
geom_line(data = portfolioplot, aes(
Date, benchmark, group = 1,
colour = "MSCI World Benchmark"), size = 1) +
labs(x = "Year", y = "Portfolio Developement",
title = "Minimum Variance Portfolio") +
scale_x_date(date_breaks = "2 years") +
scale_colour_manual("", values = c("Your Portfolio" = "blue",
"MSCI World Benchmark" = "grey")) +
theme(legend.position=c(.9, .1))
theme_minimal()
}
###### Equity + longbond overweight bond #######################################
if (input$rpref2 == 1 && input$inv_horizon > 10) {
finaldata <- datasplit(newData(), updateProgress)
finalpf <- optimpf(finaldata)
longbondindexed <- indexpf(as.data.frame(longbond))
portfoliofinal <<- equityanddebtpf(finalpf, longbondindexed, 0.2)
portfolioplot <- cbind(ovr$Date,portfoliofinal)
names(portfolioplot) <- c("Date","Portfolio")
portfolioplot$Date <- strptime(as.character(portfolioplot$Date),
"%d/%m/%Y")
portfolioplot$Date <- as.Date(format(portfolioplot$Date, "%Y-%m-%d"))
portfolioplot <- cbind(portfolioplot, benchmark)
plotfinal <- ggplot() +
geom_line(data = portfolioplot, aes(
Date, Portfolio, group = 1, colour = "Your Portfolio"), size = 1) +
geom_line(data = portfolioplot, aes(
Date, benchmark, group = 1,
colour = "MSCI World Benchmark"), size = 1) +
labs(x = "Year", y = "Portfolio Developement",
title = "Sharpe Ratio optimized Equity
Portfolio with 80% Longterm Debt") +
scale_x_date(date_breaks = "2 years")+
scale_colour_manual("", values = c("Your Portfolio" = "blue",
"MSCI World Benchmark" = "grey")) +
theme(legend.position = c(.9, .1))
theme_minimal()
equityinvestment <<- 0.2
}
############################ risk parity #######################################
if ((input$rpref2 == 4 && input$inv_horizon <= 5) ||
(input$rpref2 == 5 && input$inv_horizon <= 5) ||
(input$rpref2 == 4 && input$inv_horizon > 5 && input$inv_horizon <= 10) ||
(input$rpref2 == 5 && input$inv_horizon > 5 && input$inv_horizon <= 10) ||
(input$rpref2 == 3 && input$inv_horizon > 10) ||
(input$rpref2 == 4 && input$inv_horizon > 10)) {
finaldata <- datasplit(newData(), updateProgress)
finalpf <- optimpf(finaldata)
longbonddf <- as.data.frame(longbond)
commoditydf <- as.data.frame(commodities)
portfoliofinal <<- riskparitypf(finalpf, longbonddf, commoditydf)
equityinvestment <<- as.numeric(portfoliofinal[2])
portfoliofinal <<- as.data.frame(portfoliofinal[1])
portfolioplot <- cbind(ovr$Date, portfoliofinal)
names(portfolioplot) <- c("Date", "Portfolio")
portfolioplot$Date <- strptime(as.character(portfolioplot$Date),
"%d/%m/%Y")
portfolioplot$Date <- as.Date(format(portfolioplot$Date, "%Y-%m-%d"))
portfolioplot <- cbind(portfolioplot, benchmark)
plotfinal <- ggplot() +
geom_line(data = portfolioplot, aes(
Date, Portfolio, group = 1, colour = "Your Portfolio"), size = 1) +
geom_line(data = portfolioplot, aes(
Date, benchmark, group = 1,
colour = "MSCI World Benchmark"), size = 1) +
labs(x = "Year", y = "Portfolio Developement",
title = "Risk Parity Portfolio with
Sharpe Ratio optimized Equity Part") +
scale_x_date(date_breaks = "2 years") +
scale_colour_manual("", values = c("Your Portfolio" = "blue",
"MSCI World Benchmark" = "grey")) +
theme(legend.position=c(.9, .1))
theme_minimal()
}
########################### equity + longbond overweight equity ################
if ((input$rpref2 == 6 && input$inv_horizon <= 5) ||
(input$rpref2 == 6 && input$inv_horizon > 5 &&
input$inv_horizon <= 10) ||
(input$rpref2 == 5 && input$inv_horizon > 10)) {
finaldata <- datasplit(newData(), updateProgress)
finalpf <- optimpf(finaldata)
longbondindexed <- indexpf(as.data.frame(longbond))
portfoliofinal <<- equityanddebtpf(finalpf, longbondindexed, 0.8)
equityinvestment <<- 0.8
portfolioplot <- cbind(ovr$Date, portfoliofinal)
names(portfolioplot) <- c("Date", "Portfolio")
portfolioplot$Date <- strptime(as.character(portfolioplot$Date),
"%d/%m/%Y")
portfolioplot$Date <- as.Date(format(portfolioplot$Date,
"%Y-%m-%d"))
portfolioplot <- cbind(portfolioplot, benchmark)
plotfinal <- ggplot() +
geom_line(data = portfolioplot, aes(
Date, Portfolio, group = 1, colour = "Your Portfolio"), size = 1) +
geom_line(data = portfolioplot, aes(
Date, benchmark, group = 1,
colour = "MSCI World Benchmark"), size = 1) +
labs(x = "Year", y = "Portfolio Developement",
title = "Sharpe Ratio optimized Equity
Portfolio with 20% Longterm Debt") +
scale_x_date(date_breaks = "2 years") +
scale_colour_manual("", values = c("Your Portfolio" = "blue",
"MSCI World Benchmark" = "grey")) +
theme(legend.position=c(.9, .1))
theme_minimal()
}
################################ Pure Equity? ##################################
if ((input$rpref2 == 6 && input$inv_horizon > 10) ||
(input$rpref2 == 7 && input$inv_horizon <= 5) ||
(input$rpref2 == 7 && input$inv_horizon > 5 && input$inv_horizon <= 10) ||
(input$rpref2 == 7 && input$inv_horizon > 10)) {
finaldata <- datasplit(newData(),updateProgress)
portfoliofinal <<- optimpf(finaldata)
equityinvestment <<- 1
portfolioplot <- cbind(ovr$Date, portfoliofinal)
names(portfolioplot) <- c("Date", "Portfolio")
portfolioplot$Date <- strptime(as.character(portfolioplot$Date),
"%d/%m/%Y")
portfolioplot$Date <- as.Date(format(portfolioplot$Date,
"%Y-%m-%d"))
portfolioplot <- cbind(portfolioplot, benchmark)
plotfinal <- ggplot()+
geom_line(data = portfolioplot, aes(
Date, Portfolio, group = 1, colour = "Your Portfolio"), size = 1) +
geom_line(data = portfolioplot, aes(
Date, benchmark, group = 1,
colour = "MSCI World Benchmark"), size = 1) +
labs(x = "Year", y = "Portfolio Developement",
title = "Sharpe Ratio optimized 100% Equity Portfolio") +
scale_x_date(date_breaks = "2 years") +
scale_colour_manual("", values = c("Your Portfolio" = "blue",
"MSCI World Benchmark" = "grey")) +
theme(legend.position=c(.9, .1))
theme_minimal()
}
plotfinal
})
### PDF Download Handler - option for the user to downloas her personal report #
output$downloadReport <- downloadHandler(
filename <- function() {
paste("PF-Factsheet",
sep = ".",
switch(input$format,
PDF = "pdf",
HTML = "html",
Word = "docx")
)
},
content <- function(file) {
src <- normalizePath("report.Rmd")
####### temporarily switch to the temp dir, in case you do not have write ######
####### permission to the current working directory ############################
owd <- setwd(tempdir())
on.exit(setwd(owd))
file.copy(src,
"report.Rmd",
overwrite = TRUE)
out <- render("report.Rmd",
switch(input$format,
PDF = pdf_document(),
HTML = html_document(),
Word = word_document())
)
file.rename(out, file)
}
)
#### ValueBoxes ################################################################
################################################################################
### Boxes for Final Output Page ################################################
output$expectedValue <- renderValueBox({
valueBox(
paste0(round(((1 + (averagereturn(portfoliofinal))) ^
input$inv_horizon) * input$initial_wealth), "$"),
paste0("Expected wealth after ", input$inv_horizon, " years" ),
icon = icon("hand-holding-usd"),
color = "blue"
)
})
output$yearlygain <- renderValueBox({
valueBox(
paste0(round((averagereturn(portfoliofinal) * 100)), "%"),
"Expected yearly return",
icon = icon("chart-line"),
color = "green"
)
})
output$maxdrawdown <- renderValueBox({
valueBox(
paste0(round((maxdrawdown(portfoliofinal) * 100)), "%"),
"Maximum Drawdown",
icon = icon("angle-double-down"),
color = "red"
)
})
output$equity <- renderValueBox({
valueBox(
paste0(round(equityinvestment * 100, 2), "%"),
"Invested in Equity",
icon = icon("balance-scale"),
color = "red"
)
})
output$sharpe <- renderValueBox({
valueBox(
round((averagereturn(portfoliofinal) / yearlystd(portfoliofinal)), 2),
"Sharpe Ratio",
icon = icon("calculator"),
color = "green"
)
})
output$std <- renderValueBox({
valueBox(
paste0(round((yearlystd(portfoliofinal) * 100)), "%"),
"Standard Deviation",
icon = icon("square-root-alt"),
color = "blue"
)
})
################################################################################
output$horizonBox <- renderValueBox({
valueBox(
paste0(input$inv_horizon, " years"),
"Investment Horizon",
icon = icon("hourglass-half"),
color = "blue"
)
})
output$returnBox <- renderValueBox({
valueBox(
paste0(drift[input$rpref] * 100, "%"),
"Return",
icon = icon("chart-line"),
color = "green"
)
})
output$stdBox <- renderValueBox({
valueBox(
paste0(diffusion[input$rpref] * 100, "%"),
"Standard Deviation",
icon = icon("square-root-alt"),
color = "red"
)
})
output$avgBox <- renderValueBox({
if (sum(sim$data) == 0) {
valueBox(
paste0(NA, "$"),
"Average Value",
icon = icon("hand-holding-usd"),
color = "blue"
)
} else {
valueBox(
paste0(round(mean(sim$data)), "$"),
"Average Value",
icon = icon("hand-holding-usd"),
color = "blue"
)
}
})
output$uplimBox <- renderValueBox({
if (sum(sim$data) == 0) {
valueBox(
paste0(NA, "$"),
"90% Limit Profit",
icon = icon("greater-than"),
color = "green"
)
} else {
valueBox(
paste0(round(sim$data[order(sim$data)[length(sim$data) * 0.9]] -
input$initial_wealth), "$"),
"90% Limit Profit",
icon = icon("greater-than"),
color = "green"
)
}
})
output$lowlimBox <- renderValueBox({
if (sum(sim$data) == 0) {
valueBox(
paste0(NA, "$"),
"10% Limit Loss",
icon = icon("less-than"),
color = "red"
)
} else {
valueBox(
paste0(round(sim$data[order(sim$data)[length(sim$data) * 0.1]] -
input$initial_wealth), "$"),
"10% Limit Loss",
icon = icon("less-than"),
color = "red"
)
}
})
output$horizonBox1 <- renderValueBox({
valueBox(
paste0(input$inv_horizon, " years"),
"Investment Horizon",
icon = icon("hourglass-half"),
color = "blue"
)
})
output$returnBox1 <- renderValueBox({
valueBox(
paste0(drift[input$rpref2] * 100, "%"),
"Return",
icon = icon("chart-line"),
color = "green"
)
})
output$stdBox1 <- renderValueBox({
valueBox(
paste0(diffusion[input$rpref2] * 100, "%"),
"Standard Deviation",
icon = icon("square-root-alt"),
color = "red"
)
})
output$avgBox1 <- renderValueBox({
valueBox(
paste0(round(mean(sim$terminal_wealth)), "$"),
"Average Value",
icon = icon("hand-holding-usd"),
color = "blue"
)
})
output$uplimBox1 <- renderValueBox({
valueBox( ############ the following line is supposed to be too long ;-)
paste0(round(sim$terminal_wealth[order(sim$terminal_wealth)[draws * 0.9]] -
input$initial_wealth), "$"),
"90% Limit Profit",
icon = icon("greater-than"),
color = "green"
)
})
output$lowlimBox1 <- renderValueBox({
valueBox( ############ the following line is supposed to be too long ;-)
paste0(round(sim$terminal_wealth[order(sim$terminal_wealth)[draws * 0.1]] -
input$initial_wealth), "$"),
"10% Limit Loss",
icon = icon("less-than"),
color = "red"
)
})
#### Switch Buttons ############################################################
################################################################################
### Switch Tabs with action buttons ############################################
observeEvent(
input$button1, {
newtab <- switch(input$tabs, "tab1" = "tab2")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button2, {
newtab <- switch(input$tabs, "tab2" = "tab1")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button3, {
newtab <- switch(input$tabs, "tab2" = "tab3")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button4, {
newtab <- switch(input$tabs, "tab3" = "tab2")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent( # include error message, when all regions are deselected #####
input$button5, {
if ("Antarctica" %in% input$mymap_groups) {
sendSweetAlert(
session = session,
title = "No investment in Penguin-Land",
text = tags$embed(src = "https://media.giphy.com/media/jxETRYAi2KReel7pqy/giphy.gif",
width = "450px",
height = "500px")
)
} else if (length(input$mymap_groups) < 3 &&
(!("North America" %in% input$mymap_groups) &&
!("Europe" %in% input$mymap_groups) &&
!("Asia" %in% input$mymap_groups))) {
sendSweetAlert(
session = session,
title = "Error Message",
text = "For diversification purposes, please select more inputs.",
type = "error"
)
} else {
newtab <- switch(input$tabs, "tab3" = "tab4")
updateTabItems(session, "tabs", newtab)
}
}
)
observeEvent(
input$button6, {
shinyjs::js$refresh()
# newtab <- switch(input$tabs, "tab4" = "tab3")
# updateTabItems(session, "tabs", newtab)
}
)
# end of server function #######################################################
################################################################################
}
runApp(shinyApp(ui,server),launch.browser = TRUE)
