)
observeEvent(
input$button32, {
newtab <- switch(input$tabs, "Map" = "Portfolio", "Portfolio" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
risks <- c(0.007, 0.02, 0.05, 0.1, 0.15, 0.25, 0.3)
output$distPlot <- renderPlot({
returns = rnorm(1:1000, mean = input$capital,
sd = input$capital*risks[input$rpref]*sqrt(input$horizon))
ggplot() + aes(returns) + geom_histogram() +
geom_vline(aes(xintercept= input$capital), color="red",
linetype="solid", size=2) + labs(
title = "Possible returns on investment" ,
x = "Return (Euros)", y = "Frequency")
})
}
runApp()
server <- function(input, output, session) {
#Teststuff for the map
output$mymap <- renderLeaflet({
leaflet() %>% setView(lng = 0, lat = 0, zoom = 2) %>% addTiles() %>% addTiles(options = tileOptions(useCache = FALSE))
})
#Buttons
observeEvent(
input$button, {
newtab <- switch(input$tabs, "risk" = "Map", "Map" = "risk")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button21, {
newtab <- switch(input$tabs, "Map" = "risk", "risk" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button22, {
newtab <- switch(input$tabs, "Map" = "Portfolio", "Portfolio" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button32, {
newtab <- switch(input$tabs, "Map" = "Portfolio", "Portfolio" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
risks <- c(0.007, 0.02, 0.05, 0.1, 0.15, 0.25, 0.3)
output$distPlot <- renderPlot({
returns = rnorm(1:1000, mean = input$capital,
sd = input$capital*risks[input$rpref]*sqrt(input$horizon))
ggplot() + aes(returns) + geom_histogram() +
geom_vline(aes(xintercept= input$capital), color="red",
linetype="solid", size=2) + labs(
title = "Possible returns on investment" ,
x = "Return (Euros)", y = "Frequency")
})
}
runApp()
server <- function(input, output, session) {
#Teststuff for the map
output$mymap <- renderLeaflet({
leaflet() %>% setView(lng = 0, lat = 0, zoom = 2) %>% addTiles() %>% addTiles(options = tileOptions(useCache = FALSE), providerTileOptions(noWrap = TRUE))
})
#Buttons
observeEvent(
input$button, {
newtab <- switch(input$tabs, "risk" = "Map", "Map" = "risk")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button21, {
newtab <- switch(input$tabs, "Map" = "risk", "risk" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button22, {
newtab <- switch(input$tabs, "Map" = "Portfolio", "Portfolio" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button32, {
newtab <- switch(input$tabs, "Map" = "Portfolio", "Portfolio" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
risks <- c(0.007, 0.02, 0.05, 0.1, 0.15, 0.25, 0.3)
output$distPlot <- renderPlot({
returns = rnorm(1:1000, mean = input$capital,
sd = input$capital*risks[input$rpref]*sqrt(input$horizon))
ggplot() + aes(returns) + geom_histogram() +
geom_vline(aes(xintercept= input$capital), color="red",
linetype="solid", size=2) + labs(
title = "Possible returns on investment" ,
x = "Return (Euros)", y = "Frequency")
})
}
runApp()
server <- function(input, output, session) {
#Teststuff for the map
output$mymap <- renderLeaflet({
leaflet() %>% setView(lng = 0, lat = 0, zoom = 2) %>% addTiles() %>% addTiles(options = tileOptions(useCache = FALSE))
})
#Buttons
observeEvent(
input$button, {
newtab <- switch(input$tabs, "risk" = "Map", "Map" = "risk")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button21, {
newtab <- switch(input$tabs, "Map" = "risk", "risk" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button22, {
newtab <- switch(input$tabs, "Map" = "Portfolio", "Portfolio" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button32, {
newtab <- switch(input$tabs, "Map" = "Portfolio", "Portfolio" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
risks <- c(0.007, 0.02, 0.05, 0.1, 0.15, 0.25, 0.3)
output$distPlot <- renderPlot({
returns = rnorm(1:1000, mean = input$capital,
sd = input$capital*risks[input$rpref]*sqrt(input$horizon))
ggplot() + aes(returns) + geom_histogram() +
geom_vline(aes(xintercept= input$capital), color="red",
linetype="solid", size=2) + labs(
title = "Possible returns on investment" ,
x = "Return (Euros)", y = "Frequency")
})
}
nycounties <- geojsonio::geojson_read("json.geojson",
what = "sp")
library(geojsonio)
?geojson_read
nycounties <- geojsonio::geojson_read("continents.txt",
what = "sp")
save(json, file = "continents.json")
nycounties <- geojsonio::geojson_read("continents.json",
what = "sp")
nycounties <- geojsonio::geojson_read("continents.geojson",
what = "sp")
nycounties <- geojson_read("continents.json",
what = "sp")
renderLeaflet({
leaflet() %>%
setView(lng = 0, lat = 0, zoom = 2) %>%
addTiles() %>%
addTiles(options = tileOptions(useCache = FALSE))
})
leaflet() %>%
setView(lng = 0, lat = 0, zoom = 2) %>%
addTiles() %>%
addTiles(options = tileOptions(useCache = FALSE))
leaflet() %>%
setView(lng = 0, lat = 0, zoom = 2) %>%
addTiles() %>%
addTiles(options = tileOptions(useCache = FALSE)) %>%
addGeoJSON(geojson = json)
server <- function(input, output, session) {
#Teststuff for the map
output$mymap <- renderLeaflet({
leaflet() %>%
setView(lng = 0, lat = 0, zoom = 2) %>%
addTiles() %>%
addTiles(options = tileOptions(useCache = FALSE)) %>%
addGeoJSON(geojson = json)
})
#Buttons
observeEvent(
input$button, {
newtab <- switch(input$tabs, "risk" = "Map", "Map" = "risk")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button21, {
newtab <- switch(input$tabs, "Map" = "risk", "risk" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button22, {
newtab <- switch(input$tabs, "Map" = "Portfolio", "Portfolio" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button32, {
newtab <- switch(input$tabs, "Map" = "Portfolio", "Portfolio" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
risks <- c(0.007, 0.02, 0.05, 0.1, 0.15, 0.25, 0.3)
output$distPlot <- renderPlot({
returns = rnorm(1:1000, mean = input$capital,
sd = input$capital*risks[input$rpref]*sqrt(input$horizon))
ggplot() + aes(returns) + geom_histogram() +
geom_vline(aes(xintercept= input$capital), color="red",
linetype="solid", size=2) + labs(
title = "Possible returns on investment" ,
x = "Return (Euros)", y = "Frequency")
})
}
runApp()
?addGeoJSON
server <- function(input, output, session) {
#Teststuff for the map
output$mymap <- renderLeaflet({
leaflet() %>%
setView(lng = 0, lat = 0, zoom = 2) %>%
addTiles() %>%
addTiles(options = tileOptions(useCache = FALSE)) %>%
addGeoJSON(geojson = json,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE))
})
#Buttons
observeEvent(
input$button, {
newtab <- switch(input$tabs, "risk" = "Map", "Map" = "risk")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button21, {
newtab <- switch(input$tabs, "Map" = "risk", "risk" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button22, {
newtab <- switch(input$tabs, "Map" = "Portfolio", "Portfolio" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button32, {
newtab <- switch(input$tabs, "Map" = "Portfolio", "Portfolio" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
risks <- c(0.007, 0.02, 0.05, 0.1, 0.15, 0.25, 0.3)
output$distPlot <- renderPlot({
returns = rnorm(1:1000, mean = input$capital,
sd = input$capital*risks[input$rpref]*sqrt(input$horizon))
ggplot() + aes(returns) + geom_histogram() +
geom_vline(aes(xintercept= input$capital), color="red",
linetype="solid", size=2) + labs(
title = "Possible returns on investment" ,
x = "Return (Euros)", y = "Frequency")
})
}
runApp()
server <- function(input, output, session) {
#Teststuff for the map
output$mymap <- renderLeaflet({
leaflet() %>%
setView(lng = 0, lat = 0, zoom = 2) %>%
addTiles() %>%
addTiles(options = tileOptions(useCache = FALSE)) %>%
addGeoJSON(geojson = json,
options = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE))
})
#Buttons
observeEvent(
input$button, {
newtab <- switch(input$tabs, "risk" = "Map", "Map" = "risk")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button21, {
newtab <- switch(input$tabs, "Map" = "risk", "risk" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button22, {
newtab <- switch(input$tabs, "Map" = "Portfolio", "Portfolio" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button32, {
newtab <- switch(input$tabs, "Map" = "Portfolio", "Portfolio" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
risks <- c(0.007, 0.02, 0.05, 0.1, 0.15, 0.25, 0.3)
output$distPlot <- renderPlot({
returns = rnorm(1:1000, mean = input$capital,
sd = input$capital*risks[input$rpref]*sqrt(input$horizon))
ggplot() + aes(returns) + geom_histogram() +
geom_vline(aes(xintercept= input$capital), color="red",
linetype="solid", size=2) + labs(
title = "Possible returns on investment" ,
x = "Return (Euros)", y = "Frequency")
})
}
runApp()
runApp()
shiny::runApp()
library(shiny)
library(shinydashboard)
library(ggplot2)
library(leaflet)
library(RJSONIO)
library(rjson)
library(leaflet)
library(githubinstall)
library(rCharts)
library(readr)
ui <- dashboardPage(
dashboardHeader(title = "Greetings to Gryffindor RoboAdvisor page!",
titleWidth = 1480),
## Sidebar content
dashboardSidebar(width = 280,
sidebarMenu(
id = "tabs",
menuItem("Identify your goals", tabName = "risk",
icon = icon("list-ol")),
menuItem("Map your interests", tabName = "Map",
icon = icon("globe-americas")),
menuItem("Investment preferences",tabName = "Portfolio",
icon = icon("file-invoice-dollar"))
)
),
## Body content
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "risk",
fluidRow(
column(width = 5,
box(
title = "How much money would you like to invest?",
width = 0.25,
numericInput("capital", "Euros:",  value = 10000,
min = 0, max = NA)
),
box(
title = "What is your investment horizon?",
width = 0.25,
sliderInput("horizon","Years: ",
value = 10, min = 1, max = 50, step = 0.5)
),
box(
title = "Estimate your risk preference",
width = 0.25,
sliderInput("rpref","Risk: ",
value = 4, min = 1, max = 7, step = 1),
"Estimate your risk on the scale from 1 to 7,
where 1 is the lowest tolerance towards risk,
and 7 is the highest"
),
actionButton("button", "Next")
),
column(width = 7, plotOutput(outputId = "distPlot")
)
)
),
# Second Tab Content
tabItem(tabName = "Map", actionButton("button21", "Next"),
leafletOutput("mymap")
),
# Third Tab Content
tabItem(tabName = "Portfolio", actionButton("button32", "Previous")
)
)
)
)
server <- function(input, output, session) {
#Teststuff for the map
output$mymap <- renderLeaflet({
leaflet() %>%
setView(lng = 0, lat = 0, zoom = 2) %>%
addTiles() %>%
addTiles(options = tileOptions(useCache = FALSE)) %>%
addGeoJSON(geojson = json,
options = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE))
})
#Buttons
observeEvent(
input$button, {
newtab <- switch(input$tabs, "risk" = "Map", "Map" = "risk")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button21, {
newtab <- switch(input$tabs, "Map" = "risk", "risk" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button22, {
newtab <- switch(input$tabs, "Map" = "Portfolio", "Portfolio" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button32, {
newtab <- switch(input$tabs, "Map" = "Portfolio", "Portfolio" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
risks <- c(0.007, 0.02, 0.05, 0.1, 0.15, 0.25, 0.3)
output$distPlot <- renderPlot({
returns = rnorm(1:1000, mean = input$capital,
sd = input$capital*risks[input$rpref]*sqrt(input$horizon))
ggplot() + aes(returns) + geom_histogram() +
geom_vline(aes(xintercept= input$capital), color="red",
linetype="solid", size=2) + labs(
title = "Possible returns on investment" ,
x = "Return (Euros)", y = "Frequency")
})
}
runApp()
server <- function(input, output, session) {
#Teststuff for the map
json <- read_file("continents.txt")
output$mymap <- renderLeaflet({
leaflet() %>%
setView(lng = 0, lat = 0, zoom = 2) %>%
addTiles() %>%
addTiles(options = tileOptions(useCache = FALSE)) %>%
addGeoJSON(geojson = json,
options = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE))
})
#Buttons
observeEvent(
input$button, {
newtab <- switch(input$tabs, "risk" = "Map", "Map" = "risk")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button21, {
newtab <- switch(input$tabs, "Map" = "risk", "risk" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button22, {
newtab <- switch(input$tabs, "Map" = "Portfolio", "Portfolio" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
observeEvent(
input$button32, {
newtab <- switch(input$tabs, "Map" = "Portfolio", "Portfolio" = "Map")
updateTabItems(session, "tabs", newtab)
}
)
risks <- c(0.007, 0.02, 0.05, 0.1, 0.15, 0.25, 0.3)
output$distPlot <- renderPlot({
returns = rnorm(1:1000, mean = input$capital,
sd = input$capital*risks[input$rpref]*sqrt(input$horizon))
ggplot() + aes(returns) + geom_histogram() +
geom_vline(aes(xintercept= input$capital), color="red",
linetype="solid", size=2) + labs(
title = "Possible returns on investment" ,
x = "Return (Euros)", y = "Frequency")
})
}
runApp()
shiny::runApp()
install.packages("githubinstall")
runApp()
install.packages("rCharts")
install_github('rCharts')
devtools::install_github('rCharts')
require(devtools)
install_github('rCharts', 'ramnathv')
devtools::install_github('rCharts')
githubinstall("rCharts")
runApp()
runApp()
runApp()
